openapi: 3.0.1
info:
  description: This is a sample server Petstore server. For this sample, you can use
    the api key `special-key` to test the authorization filters.
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI Petstore
  version: 1.0.0
servers:
- url: http://petstore.swagger.io/v2
tags:
- description: Everything about your Pets
  name: pet
paths:
  /pet:
    post:
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "405":
          content: {}
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Add a new pet to the store
      tags:
      - pet
      x-codegen-request-body-name: body
    put:
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Pet object that needs to be added to the store
        required: true
      responses:
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Pet not found
        "405":
          content: {}
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Update an existing pet
      tags:
      - pet
      x-codegen-request-body-name: body
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: false
        in: query
        name: status
        required: true
        schema:
          items:
            default: available
            enum:
            - available
            - pending
            - sold
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid status value
      summary: Finds Pets by status
      tags:
      - pet
  /pet/{petId}:
    delete:
      operationId: deletePet
      parameters:
      - description: Pet id to delete
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "400":
          content: {}
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Deletes a pet
      tags:
      - pet
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - description: ID of pet to return
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          content: {}
          description: Invalid ID supplied
        "404":
          content: {}
          description: Pet not found
      summary: Find pet by ID
      tags:
      - pet
components:
  schemas:
    Pet:
      description: A pet for adoption
      example:
        adoptedDate: 2000-01-23T04:56:07.000+00:00
        name: doggie
        description: A good boi
        id: 0
        status: available
      properties:
        id:
          format: int64
          type: integer
        adoptedDate:
          format: date-time
          type: string
        name:
          example: doggie
          type: string
        description:
          example: A good boi
          maxLength: 512
          type: string
        status:
          description: pet status in the store
          enum:
          - available
          - pending
          - adopted
          type: string
      required:
      - adoptedDate
      - name
      title: a Pet
      type: object
    ApiResponse:
      description: Describes the result of uploading an image resource
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      title: An uploaded response
      type: object
